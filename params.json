{"name":"FastFIR","tagline":"1D real fast FIR filtering. It's really fast compared to slow filtering!!!","body":"##Simple C++ interface for 1D fast FIR filtering of Fast convolution.\r\n\r\nFast FIR filtering or convolution is very important when implementing FIR filters. Naive or slow FIR filtering can be extremely CPU intensive. So much so that a FIR filter with a few hundred taps can easily use 100% CPU usage on a desktop PC. Fast FIR filtering which uses the FFT ( *Fast Fourier Transform* ) can produce the same results with a fraction of the CPU usage and thousands of taps are trivial. Generally to be useful a FIR filter needs a few hundred taps depending on the application. \r\n\r\nThe FastFIR library contains a wrapper to KissFFT to implement Fast FIR filtering with an interface that makes it as easy to implement a Fast FIR filter as it does to implement a slow one.\r\n\r\n##Usage is a simple as \r\n\r\n```C++\r\n//create pointer\r\nQJFastFIRFilter *fastfir;\r\n\r\n//create fast FIR filter\r\nfastfir = new QJFastFIRFilter(this);\r\n\r\n//set the kernel of the filter, in this case a Low Pass filter at 800Hz\r\nfastfir->setKernel(JFilterDesign::LowPassHanning(800,48000,1001));\r\n\r\n//process data (data is QVector<kffsamp_t>, eg \"QVector<kffsamp_t> data;\")\r\nfastfir->Update(data);\r\n```\r\n\r\nIf you already have Qt Creator with Qt5 or above getting started is as simple as downloading the library and running the demo application with Qt Creator; no other downloads needed.\r\n\r\n##Filter designs included\r\n\r\nThe JFilterDesign class contains the following filter designs for use with Fast FIR filtering\r\n\r\n* LPF *Low Pass Filter*\r\n* HPF *High Pass Filter*\r\n* BPF *Band Pass Filter*\r\n* BSF *Band Stop Filter*\r\n\r\n##Further reading\r\n\r\nSee the [GitHub repository](https://github.com/jontio/FastFIR) for the library and more information.  \r\n\r\nJonti 2015\r\nhttp://jontio.zapto.org","google":"UA-66927398-1","note":"Don't delete this file! It's used internally to help with page regeneration."}